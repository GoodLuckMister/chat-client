{"version":3,"sources":["chat/chat.module.css","send/Send.js","message/Message.js","chat/socket.js","chat/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Send","value","onChange","onSend","onSubmit","className","s","Form","noValidate","autoComplete","Input","placeholder","inputProps","Button","type","variant","color","Message","key","item","Toast","Body","user","text","socket","io","process","Chat","state","currentUser","messages","message","isLogin","users","changeName","event","setState","target","inputName","preventDefault","trim","length","emit","changeMessage","sendMessage","this","on","data","newMessages","shift","disconnect","Container","MessageList","map","Object","values","id","Box","PureComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5a88b8d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Box\":\"chat_Box__1w_YO\",\"Form\":\"chat_Form__25M9g\",\"Container\":\"chat_Container__1jVXd\"};","import Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport s from '../chat/chat.module.css'\r\n\r\nconst Send = ({ value, onChange, onSend }) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSend} className={s.Form} noValidate autoComplete=\"off\">\r\n                <Input\r\n                    placeholder=\"Write your message\"\r\n                    inputProps={{ 'aria-label': 'description' }}\r\n                    onChange={onChange}\r\n                    value={value}\r\n                />\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                    Send\r\n                </Button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Send","import Toast from 'react-bootstrap/Toast'\r\n\r\n\r\n\r\n\r\nconst Message = ({ item }, key) => {\r\n\r\n    return (\r\n        <Toast key={key} >\r\n            <Toast.Body >{`${item.user}: ${item.text}`}</Toast.Body>\r\n        </Toast>\r\n    )\r\n}\r\n\r\nexport default Message","import io from 'socket.io-client'\r\nconst URL = process.env.REACT_APP_URL || 'localhost:5000'\r\n\r\nexport const socket = io(URL)","import { PureComponent } from 'react';\r\nimport Send from '../send/Send'\r\nimport Message from '../message/Message'\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport s from './chat.module.css'\r\n\r\nimport { socket } from './socket'\r\n\r\nclass Chat extends PureComponent {\r\n    socket = socket\r\n    state = {\r\n        currentUser: '',\r\n        messages: [],\r\n        message: '',\r\n        isLogin: false,\r\n        users: {}\r\n    }\r\n    componentDidMount() {\r\n        this.socket.on('message', (data) => {\r\n            if (this.state.isLogin) {\r\n                this.setState(({ messages }) => {\r\n                    const newMessages = [...messages]\r\n                    if (newMessages.length > 10) {\r\n                        newMessages.shift()\r\n                    }\r\n                    return {\r\n                        messages: [...newMessages, { user: data.user, text: data.message }]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        this.socket.on('users', (data) => {\r\n            this.setState({ users: data })\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        this.socket.disconnect()\r\n    }\r\n    changeName = (event) => {\r\n\r\n        this.setState({ currentUser: event.target.value })\r\n    }\r\n    inputName = event => {\r\n        event.preventDefault()\r\n        const user = this.state.currentUser\r\n        if (user.trim().length > 0) {\r\n            this.socket.emit('change:name', user)\r\n            this.setState({ isLogin: true })\r\n        }\r\n    }\r\n    changeMessage = (event) => {\r\n        this.setState({ message: event.target.value })\r\n    }\r\n    sendMessage = (event) => {\r\n        event.preventDefault()\r\n\r\n        const { currentUser, message } = this.state\r\n        if (message.trim().length > 0) {\r\n            this.socket.emit('message', { user: currentUser, message: message.trim() })\r\n            this.setState({ message: '' })\r\n        }\r\n    }\r\n    render() {\r\n        const { message, messages, currentUser, isLogin, users } = this.state\r\n        if (!isLogin) {\r\n            return (\r\n                <div className={s.Box} >\r\n                    <p>Send your name in form</p>\r\n                    <form onSubmit={this.inputName} className={s.Form} noValidate autoComplete=\"off\">\r\n                        <Input\r\n                            placeholder=\"Write your name\"\r\n                            inputProps={{ 'aria-label': 'description' }}\r\n                            onChange={this.changeName}\r\n                            value={currentUser}\r\n                        />\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                            Connect\r\n                        </Button>\r\n                    </form>\r\n\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className={s.Container}>\r\n\r\n                <div className={s.Send}>\r\n                    <Send\r\n                        value={message}\r\n                        onChange={this.changeMessage}\r\n                        onSend={this.sendMessage}\r\n                    />\r\n                </div>\r\n                <div className={s.MessageList}>\r\n                    {messages.map((item, key) => (\r\n                        <Message item={item} key={key} />\r\n                    ))}\r\n\r\n                </div>\r\n                <ul>\r\n\r\n                    {Object.values(users).map((user, id) => (\r\n                        <li key={id}>{user}</li>\r\n                    ))}\r\n\r\n                </ul>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat;","import Chat from './chat/Chat';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Chat />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}