{"version":3,"sources":["chat/chat.module.css","send/Send.js","message/Message.js","chat/socket.js","chat/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Send","value","onChange","onSend","className","s","Form","noValidate","autoComplete","Input","placeholder","inputProps","Button","onClick","variant","color","Message","item","user","text","socket","io","process","Chat","state","currentUser","messages","message","isLogin","users","changeName","event","setState","target","inputName","trim","length","emit","changeMessage","sendMessage","preventDefault","console","log","this","on","data","newMessages","shift","Container","MessageList","map","key","Object","values","id","Box","PureComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,IAAM,kBAAkB,KAAO,qB,8JCsBlCC,EAnBF,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC7B,OACI,8BACI,uBAAMC,UAAWC,IAAEC,KAAMC,YAAU,EAACC,aAAa,MAAjD,UACI,cAACC,EAAA,EAAD,CACIC,YAAY,qBACZC,WAAY,CAAE,aAAc,eAC5BT,SAAUA,EACVD,MAAOA,IAEX,cAACW,EAAA,EAAD,CAAQC,QAASV,EAAQW,QAAQ,YAAYC,MAAM,UAAnD,wBCJDC,EATC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEf,OACI,8BACI,iCAAOA,EAAKC,KAAZ,KAAoBD,EAAKE,W,QCFxBC,E,MAASC,GAFVC,wCC6GGC,E,4MApGXH,OAASA,E,EACTI,MAAQ,CACJC,YAAa,GACbC,SAAU,GACVC,QAAS,GACTC,SAAS,EACTC,MAAO,I,EAoBXC,WAAa,SAACC,GACV,EAAKC,SAAS,CAAEP,YAAaM,EAAME,OAAOhC,S,EAE9CiC,UAAY,WACR,IAAMhB,EAAO,EAAKM,MAAMC,YACpBP,EAAKiB,OAAOC,OAAS,IACrB,EAAKhB,OAAOiB,KAAK,cAAenB,GAChC,EAAKc,SAAS,CAAEJ,SAAS,M,EAGjCU,cAAgB,SAACP,GACb,EAAKC,SAAS,CAAEL,QAASI,EAAME,OAAOhC,S,EAE1CsC,YAAc,SAACR,GACXA,EAAMS,iBADe,MAGY,EAAKhB,MAA9BC,EAHa,EAGbA,YAAaE,EAHA,EAGAA,QACrBc,QAAQC,IAAIf,GACRA,EAAQQ,OAAOC,OAAS,IACxB,EAAKhB,OAAOiB,KAAK,UAAW,CAAEnB,KAAMO,EAAaE,QAASA,EAAQQ,SAClE,EAAKH,SAAS,CAAEL,QAAS,O,uDAtCjC,WAAqB,IAAD,OAChBgB,KAAKvB,OAAOwB,GAAG,WAAW,SAACC,GACnB,EAAKrB,MAAMI,SACX,EAAKI,UAAS,YAAmB,IAAhBN,EAAe,EAAfA,SACPoB,EAAW,YAAOpB,GAIxB,OAHIoB,EAAYV,OAAS,IACrBU,EAAYC,QAET,CACHrB,SAAS,GAAD,mBAAMoB,GAAN,CAAmB,CAAE5B,KAAM2B,EAAK3B,KAAMC,KAAM0B,EAAKlB,kBAKzEgB,KAAKvB,OAAOwB,GAAG,SAAS,SAACC,GACrB,EAAKb,SAAS,CAAEH,MAAOgB,S,oBA0B/B,WAAU,IAAD,EACsDF,KAAKnB,MAAxDG,EADH,EACGA,QAASD,EADZ,EACYA,SAAUD,EADtB,EACsBA,YAAaG,EADnC,EACmCA,QAASC,EAD5C,EAC4CA,MACjD,OAAKD,EAoBD,sBAAKxB,UAAWC,IAAE2C,UAAlB,UAEI,qBAAK5C,UAAWC,IAAEL,KAAlB,SACI,cAAC,EAAD,CACIC,MAAO0B,EACPzB,SAAUyC,KAAKL,cACfnC,OAAQwC,KAAKJ,gBAGrB,qBAAKnC,UAAWC,IAAE4C,YAAlB,SACKvB,EAASwB,KAAI,SAACjC,EAAMkC,GAAP,OACV,cAAC,EAAD,CAASlC,KAAMA,GAAWkC,QAIlC,6BAEKC,OAAOC,OAAOxB,GAAOqB,KAAI,SAAChC,EAAMoC,GAAP,OACtB,6BAAcpC,GAALoC,WApCjB,sBAAKlD,UAAWC,IAAEkD,IAAlB,UACI,uDACA,sBAAMnD,UAAWC,IAAEC,KAAMC,YAAU,EAACC,aAAa,MAAjD,SACI,cAACC,EAAA,EAAD,CACIC,YAAY,kBACZC,WAAY,CAAE,aAAc,eAC5BT,SAAUyC,KAAKb,WACf7B,MAAOwB,MAGf,cAACb,EAAA,EAAD,CAAQC,QAAS8B,KAAKT,UAAWpB,QAAQ,YAAYC,MAAM,UAA3D,4B,GAhEDyC,iBCAJC,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.01b1488b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Box\":\"chat_Box__1Fw6f\",\"Form\":\"chat_Form__1XWhA\"};","import Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport s from '../chat/chat.module.css'\r\n\r\nconst Send = ({ value, onChange, onSend }) => {\r\n    return (\r\n        <div>\r\n            <form className={s.Form} noValidate autoComplete=\"off\">\r\n                <Input\r\n                    placeholder=\"Write your message\"\r\n                    inputProps={{ 'aria-label': 'description' }}\r\n                    onChange={onChange}\r\n                    value={value}\r\n                />\r\n                <Button onClick={onSend} variant=\"contained\" color=\"primary\">\r\n                    Send\r\n                </Button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Send","\r\nconst Message = ({ item }) => {\r\n\r\n    return (\r\n        <div>\r\n            <span>{item.user}: {item.text}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import io from 'socket.io-client'\r\nconst URL = process.env.REACT_APP_URL || 'localhost:5000'\r\n\r\nexport const socket = io(URL)","import { PureComponent } from 'react';\r\nimport Send from '../send/Send'\r\nimport Message from '../message/Message'\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport s from './chat.module.css'\r\n\r\nimport { socket } from './socket'\r\n\r\nclass Chat extends PureComponent {\r\n    socket = socket\r\n    state = {\r\n        currentUser: '',\r\n        messages: [],\r\n        message: '',\r\n        isLogin: false,\r\n        users: {}\r\n    }\r\n    componentDidMount() {\r\n        this.socket.on('message', (data) => {\r\n            if (this.state.isLogin) {\r\n                this.setState(({ messages }) => {\r\n                    const newMessages = [...messages]\r\n                    if (newMessages.length > 10) {\r\n                        newMessages.shift()\r\n                    }\r\n                    return {\r\n                        messages: [...newMessages, { user: data.user, text: data.message }]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        this.socket.on('users', (data) => {\r\n            this.setState({ users: data })\r\n        })\r\n    }\r\n    changeName = (event) => {\r\n        this.setState({ currentUser: event.target.value })\r\n    }\r\n    inputName = () => {\r\n        const user = this.state.currentUser\r\n        if (user.trim().length > 0) {\r\n            this.socket.emit('change:name', user)\r\n            this.setState({ isLogin: true })\r\n        }\r\n    }\r\n    changeMessage = (event) => {\r\n        this.setState({ message: event.target.value })\r\n    }\r\n    sendMessage = (event) => {\r\n        event.preventDefault()\r\n\r\n        const { currentUser, message } = this.state\r\n        console.log(message)\r\n        if (message.trim().length > 0) {\r\n            this.socket.emit('message', { user: currentUser, message: message.trim() })\r\n            this.setState({ message: '' })\r\n        }\r\n    }\r\n    render() {\r\n        const { message, messages, currentUser, isLogin, users } = this.state\r\n        if (!isLogin) {\r\n            return (\r\n                <div className={s.Box} >\r\n                    <p>Send your name in form</p>\r\n                    <form className={s.Form} noValidate autoComplete=\"off\">\r\n                        <Input\r\n                            placeholder=\"Write your name\"\r\n                            inputProps={{ 'aria-label': 'description' }}\r\n                            onChange={this.changeName}\r\n                            value={currentUser}\r\n                        />\r\n                    </form>\r\n                    <Button onClick={this.inputName} variant=\"contained\" color=\"primary\">\r\n                        Connect\r\n                    </Button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className={s.Container}>\r\n\r\n                <div className={s.Send}>\r\n                    <Send\r\n                        value={message}\r\n                        onChange={this.changeMessage}\r\n                        onSend={this.sendMessage}\r\n                    />\r\n                </div>\r\n                <div className={s.MessageList}>\r\n                    {messages.map((item, key) => (\r\n                        <Message item={item} key={key} />\r\n                    ))}\r\n\r\n                </div>\r\n                <ul>\r\n\r\n                    {Object.values(users).map((user, id) => (\r\n                        <li key={id}>{user}</li>\r\n                    ))}\r\n\r\n                </ul>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat;","import Chat from './chat/Chat';\n\n\nfunction App() {\n  return (\n    <Chat />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}